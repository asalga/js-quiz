{
    "questions": [
        {
            "id": 0,
            "name": "",
            "q": "",
            "a": [
            {
                "note": "",
                "code": [
                    ""
                ]
            }],
            "tags": "",
            "complexity": "",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 1,
            "name": "no return statement",
            "q": "If a return statment is not present in a function body, what does it return if called?",
            "a": "If you omit the return statement, <b>undefined</b> is returned implicitly.",
            "snippets": [
                [
                    "console.log( (function(){}()) );",
                    "// undefined"
                ]
            ],
            "tags": "function",
            "complexity": "0",
            "references": [],
            "notes": ""
        },

        {
            "id": 2,
            "name": "way to create a function",
            "q": "Provide different ways of creating a function.",
            "a": "In JavaScript, you can create functions in several ways.",
            "snippets": [
                [
                    "// function declaration",
                    "function foo(x, y){return x+y;}"
                ],
                [
                    "// arrow function",
                    "(x, y) => {return x + y;}"
                ],
                [
                    "// function expression/definition"
                    "var foo = function(x, y){return x + y;}"
                ],
                [
                    "// using Function",
                    "var foo = new Function('x', 'y', 'return x + y;');"
                ]
            ],
            "tags": "function",
            "complexity": "0",
            "references": [],
            "notes": ""
        },

        {
            "id": 3,
            "name": "function expression vs. function declaration",
            "q": "What is the difference between function expressions and function declarations?",
            "a": "Function declarations have names and are <i>hoisted</i>. Function expressions can exist anywhere where a valid expression can exist. Function expressions do not require a name.",
            "snippets": [
                [
                    "// Another way to create a function is by writing a function expression. Note that it is called an expression since it evaluates to a value.",
                    "function funcDeclaration(){",
                    "return 42;",
                    "}"
                ],
                [
                    "// When writing a function expression, you may assign a name to the function. This is helpful in debugging as well as it allows your function to be called recursively.",
                    "// Note, that this name can only be used within the function body.",
                    "var f = function foo(){",
                    "foo; //ok here",
                    "}",
                    "foo;",
                    "// > Uncaught ReferenceError: foo is not defined"
                ]
            ],
            "tags": "function",
            "complexity": "0",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 4,
            "name": "arrow function benefits",
            "q": "What are the benefits of arrow functions?",
            "a": [
            {
                "note": "Firstly, arrow functions are less verbose than function expressions.",
                "code": [
                    "[1,2,3].forEach(function(val){",
                    "  console.log(val);",
                    "});",
                    "// v.s.",
                    "[1,2,3].forEach(val => console.log(val));"
                ]
            },
            {
                "note": "Second, within arrow functions, their `this` variable is lexically bound. It isn’t necessary to create a temporary `that` variable.",
                "code": [
                    "var nums = [1,2,3];",
                    "var t = document.getElementById('id');",
                    "t.addEventListener('click', function(){",
                    "  // `this` is the HTML Node",
                    "  ",
                    "  nums.forEach( function(){",
                    "    // `this` is the the global object / undefined in strict mode",
                    "  });",
                    "});",

                ]
            }],
            "tags": "function,es6,arrow functions",
            "complexity": "0",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 5,
            "name": "when to avoid arrow functions",
            "q": "When should arrow functions be avoided?",
            "a": [
            {
                "note": "Arrow functions are perfect for short functions, one-liners. The longer the function, the less arrow functions help.",
                "code": []
            }],
            "tags": "function,es6,arrow function",
            "complexity": "",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 6,
            "name": "invalid places for arrow functions",
            "q": "In what situations can you <b>not</b> use arrow functions?",
            "a": [
            {
                "note": "You cannot use arrow functions as constructor functions.",
                "code": [
                    "var Person = function(){};",
                    "new Person; // ok",
                    "var Person = ()=>{};",
                    "new Person; // TypeError: Person is not a constructor",
                ]
            }],
            "tags": "arrow function",
            "complexity": "0",
            "references": [],
            "notes": "",
            "see-also": "7"
        },

        {
            "id": 7,
            "name": "arrow function constructors",
            "q": "Why can’t arrow functions be used at constructor functions?",
            "a": [],
            "tags": "arrow function",
            "complexity": "0",
            "references": [],
            "notes": "",
            "see-also": "6"
        },



    ]
}