{
    "questions": [

        {
            "id": 28,
            "q": "What are the 9 Array methods introduced in es5?",
            "name": "es5 array methods",
            "a": [
            {
                "note": "",
                "code": [

                    "// Perform an action for each element",
                    "[1,2,3].forEach( (...e) => {",
                    "  console.log(e)",
                    "});",
                    "▶ (3) [1, 0, Array(3)]",
                    "▶ (3) [2, 1, Array(3)]",
                    "▶ (3) [3, 2, Array(3)]",

                    "",
                    "// map returns an array",
                    "var arr = [1,2,3].map( (...e) => {",
                    "  return e[0] ** 2;",
                    "});",
                    "▶ (3) [1, 4, 9]",

                    "",
                    "// filter returns an array with elements that satisfy the predicate",
                    "var arr = [1,2,3].filter( (...e) => {",
                    "  return e[0] % 2 !== 0;",
                    "});",
                    "▶ (2) [1, 3]",

                    "",
                    "[1,2,3,1].indexOf(2)",
                    "▶ 1",

                    "",
                    "[1,2,3,1].lastIndexOf(1)",
                    "▶ 3",

                    "",
                    "// Applied function against accumulator",
                    "var arr = [1,2,3].reduce((accum, curr) => accum + curr);",
                    "▶ 6",

                    "",
                    "[1,2,3].reduceRight()",

                    "",
                    "// Do all elements satisfy the predicate?",
                    "[1,2,3].every(i => i < 10);",
                    "▶ true",

                    "",
                    "// Does at least 1 element satisfy the predicate?",
                    "[1,2,3].some(i => i > 2);",
                    "▶ true"
                ]
            }],
            "tags": "array,es5",
            "complexity": "",
            "references": ["http://kangax.github.io/compat-table/es5/"],
            "notes": "",
            "see-also": ""
        },


        {
            "id": 27,
            "q": "List 3 ways to convert a String to Number",
            "name": "convert String to Number",
            "a": [
            {
                "note": "",
                "code": [
                    "~~'42'            // Use only for ints. returns 0 if letter present",
                    "~~'-4'            ",
                    "+ '101'           // Not the best perf, but reliable. May return NaN",
                    "1 * '3.14'",
                    "'88' - 0",
                    "parseFloat('42')",
                    "parseInt('13', 10)",
                    "Number('1')"
                ]
            }],
            "tags": "primitive",
            "complexity": "5",
            "references": [
                "https://coderwall.com/p/5tlhmw/converting-strings-to-number-in-javascript-pitfalls"
            ],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 1,
            "name": "No return statement",
            "q": "If a return statment is not present in a function body, what does it return if called?",
            "a": [
            {
                "note": "If you omit the return statement, <span class='code'>undefined</span> is returned implicitly.",
                "code": [
                    "console.log( (function(){}()) );",
                    "▶ undefined"
                ]
            }],
            "tags": "function",
            "complexity": "1",
            "references": [],
            "grade": "10",
            "notes": ""
        },

        {
            "id": 2,
            "name": "way to create a function",
            "q": "Provide different ways of creating a function.",
            "a": [
            {
                "note": "In JavaScript, you can create functions in several ways.",
                "code": [
                    "// function declaration",
                    "function foo(x, y){return x + y;}\n",

                    "// function expression",
                    "var foo = function(x, y){return x + y;}\n",

                    "// using Function",
                    "var foo = new Function('x', 'y', 'return x + y;');\n",

                    "// arrow function",
                    "(x, y) => {return x + y;}"
                ]
            }],
            "tags": "function",
            "complexity": "4",
            "references": [],
            "grade": 7,
            "notes": ""
        },

        {
            "id": 3,
            "name": "function expression vs. function declaration",
            "q": "What is the difference between function expressions and function declarations?",
            "a": [
            {
                "note": "The syntactical difference between function expressions and declarations are subtle. A function expression assigns a function to a variable.",
                "code": ["var f = function(){};"]
            },
            {
                "note": [
                    "When writing a function expression, you may optionally assign a name to the function.",
                    "This is helpful in debugging as well as it allows your function to be called recursively.",
                    "Also note that the name of the function will only be visible in the context of the function.",
                    "Note that it is called an <i>expression</i> since it <i>evaluates</i> to a value."
                ],
                "code": [
                    "// Note, that this name can only be used within the function body.",
                    "var f = function foobar(){",
                    "  console.log(foobar.name);",
                    "}",
                    "f();",
                    "foobar",
                    "▶ Uncaught ReferenceError: foobar is not defined"
                ]
            },
            {
                "note": "Function declarations have names and are <i>hoisted</i>. Function expressions can exist anywhere where a valid expression can exist.",
                "code": [
                    "// We can call the function before the declaration because it gets hoisted.",
                    "funcDecl();",
                    "function funcDecl(){",
                    "  return 42;",
                    "}"
                ]
            },
            {
                "note": "Unlike function declarations, function expressions are <b>not</b> hoisted. So the following snippet results in an error.",
                "code": [
                    "foo();",
                    "var foo = function(){};",
                    "Uncaught TypeError: foo is not a function"
                ]
            }],
            "tags": "function",
            "complexity": "0",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 4,
            "name": "arrow function benefits",
            "q": "What are the benefits of arrow functions?",
            "a": [
            {
                "note": "Firstly, arrow functions are less verbose than function expressions.",
                "code": [
                    "[1,2,3].forEach(function(val){",
                    "  console.log(val);",
                    "});",
                    "// v.s.",
                    "[1,2,3].forEach(val => console.log(val));"
                ]
            },
            {
                "note": "Second, within arrow functions, their `this` variable is lexically bound. It isn’t necessary to create a temporary `that` variable.",
                "code": [
                    "var nums = [1,2,3];",
                    "var t = document.getElementById('id');",
                    "t.addEventListener('click', function(){",
                    "  // `this` is the HTML Node",
                    "",
                    "  nums.forEach( function(){",
                    "    // `this` is the the global object / undefined in strict mode",
                    "  });",
                    "});"
                ]
            }],
            "tags": "function,es6,arrow functions",
            "complexity": "0",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 5,
            "name": "when to avoid arrow functions",
            "q": "When should arrow functions be avoided?",
            "a": [
            {
                "note": "Arrow functions are perfect for short functions, one-liners. The longer the function, the less arrow functions help."
            }],
            "tags": "function,es6,arrow function",
            "complexity": "",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 6,
            "name": "invalid places for arrow functions",
            "q": "In what situations can you <b>not</b> use arrow functions?",
            "a": [
            {
                "note": "You cannot use arrow functions as constructor functions.",
                "code": [
                    "var Person = function(){};",
                    "new Person; // ok",
                    "var Person = () => {};",
                    "new Person; // TypeError: Person is not a constructor"
                ]
            }],
            "tags": "arrow function",
            "complexity": "0",
            "references": [],
            "notes": "",
            "see-also": "7"
        },

        {
            "id": 13,
            "name": "Way to create empty array",
            "q": "List 5 ways to instantiate an empty array",
            "a": [
            {
                "note": "",
                "code": [
                    "new Array(0);   // explicit size of zero",
                    "new Array();    // implicit size of zero",
                    "new Array;      // we can omit parenthesies",
                    "Array();        // omit 'new'",
                    "[];             // literal notation"
                ]
            }],
            "tags": "array",
            "complexity": "1",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 20,
            "name": "",
            "q": "Is it possible to create an object without a prototype?",
            "a": [
            {
                "note": "Yes. Using the Object object, you can call create() and pass in null",
                "code": [
                    "var obj = Object.create(null);",
                    "console.log(obj);",
                    "▶ {",
                    "  No properties",
                    "}"
                ]
            }],
            "tags": "variable",
            "complexity": "",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 21,
            "name": "",
            "q": "If calling a constructor function, are parentheses still required?",
            "a": [
            {
                "note": "No. You may omit the parentheses if no arguments are passed into a constructor function. <span class='code'>this.arguments</span> will resolve to <span class='code'>undefined</span>.",
                "code": [
                    "new Image;",
                    "new Array;",
                    "new Date;",
                    "new Map;",
                    "new Set;",
                    "// etc.."
                ]
            }],
            "tags": "variable",
            "complexity": "",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 22,
            "name": "",
            "q": "What are the built-in Javascript constructors?",
            "a": [
            {
                "note": "",
                "code": [
                    "Array;",
                    "Boolean;",
                    "Date;",

                    "Error;",
                    "Function;",
                    "Number;",

                    "Object;",
                    "RegExp;",
                    "String;"
                ]
            }],
            "tags": "primitives",
            "complexity": "3",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 23,
            "name": "ways to create empty object",
            "q": "List 7 ways to create an empty object.",
            "a": [
            {
                "note": "There are several syntactic ways to create an empty object in JS",
                "code": [
                    "var o = {};                    // object literal",
                    "var o = Object();              // ...or `new` can be omitted",
                    "var o = new Object;            // ...or parenthesis can be omitted",
                    "var o = new Object();          // call Object constructor function",
                    "var o = new function(){};      // simple singleton pattern",
                    "var o = Object.create({});     // call Object `create` factory method",
                    "class Obj{};var o = new Obj(); // using ES6 class keyword"
                ]
            }],
            "tags": "primitives",
            "complexity": "3",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 24,
            "name": "",
            "q": "What’s the best way to check for an undefined value?",
            "a": [
            {
                "note": "",
                "code": [
                    ""
                ]
            }],
            "tags": "primitives",
            "complexity": "3",
            "references": [],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 25,
            "name": "",
            "q": "Why was arguments.callee removed from ES5 strict mode?",
            "a": [
            {
                "note": "",
                "code": [
                    ""
                ]
            }],
            "tags": "primitives",
            "complexity": "3",
            "references": [
                "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee"
            ],
            "notes": "",
            "see-also": ""
        },

        {
            "id": 26,
            "name": "",
            "q": "What is a Promise?",
            "a": [
            {
                "note": "",
                "code": [
                    ""
                ]
            }],
            "tags": "primitives",
            "complexity": "7",
            "references": [
                "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
            ],
            "notes": "",
            "see-also": ""
        }




    ]
}